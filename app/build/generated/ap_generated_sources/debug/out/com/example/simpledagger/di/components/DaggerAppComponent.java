// Generated by Dagger (https://dagger.dev).
package com.example.simpledagger.di.components;

import androidx.lifecycle.ViewModel;
import com.example.simpledagger.MainActivity;
import com.example.simpledagger.MainActivity_MembersInjector;
import com.example.simpledagger.di.modules.NetworkModule_ProvideRetrofitFactory;
import com.example.simpledagger.di.modules.NetworkModule_ProvideUserServiceFactory;
import com.example.simpledagger.remote.UserService;
import com.example.simpledagger.repository.UserRepository;
import com.example.simpledagger.repository.UserRepository_Factory;
import com.example.simpledagger.viewmodel.UserViewModel;
import com.example.simpledagger.viewmodel.UserViewModel_Factory;
import com.example.simpledagger.viewmodel.ViewModelFactory;
import com.example.simpledagger.viewmodel.ViewModelFactory_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<UserService> provideUserServiceProvider;

  private Provider<UserRepository> userRepositoryProvider;

  private Provider<UserViewModel> userViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent() {

    initialize();
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create());
    this.provideUserServiceProvider = DoubleCheck.provider(NetworkModule_ProvideUserServiceFactory.create(provideRetrofitProvider));
    this.userRepositoryProvider = UserRepository_Factory.create(provideUserServiceProvider);
    this.userViewModelProvider = UserViewModel_Factory.create(userRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(UserViewModel.class, (Provider) userViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  public static final class Builder {
    private Builder() {
    }

    public AppComponent build() {
      return new DaggerAppComponent();
    }
  }
}
